pipeline {
    agent any
    triggers {
        pollSCM('* * * * *')  //
    }
     environment {
            DOCKER_IMAGE = "mateogc/rrhhjm:latest"
        }
    stages {
        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./demo/gradlew || true'
            }
        }
        stage("Compile") {
            steps {
                dir('demo') {
                    sh "./gradlew compileJava"
                }
            }
        }
        stage("Unit test") {
            steps {
                dir('demo') {
                    sh "./gradlew test"
                }
            }
        }
        stage("Code coverage") {
            steps {
                dir('demo') {
                    sh "./gradlew jacocoTestReport"
                    publishHTML(target: [
                        reportDir: 'build/reports/jacoco/test/html',
                        reportFiles: 'index.html',
                        reportName: 'JacocoReport'
                    ])
                    sh "./gradlew jacocoTestCoverageVerification"
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                dir('demo') {
                    withSonarQubeEnv('sonarqube') {
                        sh './gradlew sonarqube'
                    }
                }
            }
        stage('Build Docker image') {
                    steps {
                        script {
                            sh 'docker build -t $DOCKER_IMAGE .'
                        }
                    }
                }
        stage('Trivy Scan') {
            steps {
                script {
                    sh 'trivy image --exit-code 1 --severity HIGH,CRITICAL $DOCKER_IMAGE'
                }
            }
        }
        stage('Push Docker image to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dckr_pat_1lWe2AGtPlU0Q80r0TN-r2Lfyno', variable: 'dckr_pat_1lWe2AGtPlU0Q80r0TN-r2Lfyno')])  {
                        sh "docker login -u mateogc -p dckr_pat_1lWe2AGtPlU0Q80r0TN-r2Lfyno"
                        sh 'docker push $DOCKER_IMAGE'
                   }
               }
           }
       }
   }
}
