pipeline {
    agent any
    triggers {
        pollSCM('* * * * *')  //
    }
    environment {
        DOCKER_IMAGE = "mateogc/rrhhjk:latest"
        REGISTRY_CREDENTIALS = credentials('2d27f86a-a727-4725-8e8c-27279919cd8a')
    }
    stages {
        stage('Build Docker image') {
            steps {
                script {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('Push Docker image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', '2d27f86a-a727-4725-8e8c-27279919cd8a') {
                        sh 'docker push $DOCKER_IMAGE'
                    }
                }
            }
        }
        stage('Set Permissions') {
            steps {
                sh 'chmod +x ./demo/gradlew || true'
            }
        }
        stage("Compile") {
            steps {
                dir('demo') {
                    sh "./gradlew compileJava"
                }
            }
        }
        stage("Unit test") {
            steps {
                dir('demo') {
                    sh "./gradlew test"
                }
            }
        }
        stage("Code coverage") {
            steps {
                dir('demo') {
                    sh "./gradlew jacocoTestReport"
                    publishHTML(target: [
                        reportDir: 'build/reports/jacoco/test/html',
                        reportFiles: 'index.html',
                        reportName: 'JacocoReport'
                    ])
                    sh "./gradlew jacocoTestCoverageVerification"
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                dir('demo') {
                    withSonarQubeEnv('sonarqube') {
                        sh './gradlew sonarqube'
                    }
                }
            }
        }

    }
}
