plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id "org.sonarqube" version "4.4.1.3373"
}

group = 'com.example'
version = '1'


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Java Bean Validation API and Hibernate Validator
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.hibernate.validator:hibernate-validator:6.2.5.Final'

	// Java Expression Language (EL) dependency needed by Hibernate Validator
	implementation 'org.glassfish:jakarta.el:4.0.2'

	// Lombok and H2
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'com.h2database:h2:2.2.222'
	annotationProcessor 'org.projectlombok:lombok'

	// Testing dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		// You can specify Spring's BOM imports here if needed
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
test {
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	dependsOn test
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, exclude: [
							'com/example/demo/controller/**'
					])
				})
		)
	}
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}
sonarqube {
	properties {
		property("sonar.projectName", "clase20242")
		property("sonar.projectKey", "rrhhjm_humanresourcesapp")
	}
}
